---
// src/pages/reset-password.astro
const supabaseUrl = import.meta.env.PUBLIC_SUPABASE_URL;
const supabaseAnonKey = import.meta.env.PUBLIC_SUPABASE_ANON_KEY;
---

<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Set New Password | Running Club</title>
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/@picocss/pico@1/css/pico.min.css">
</head>
<body data-supabase-url={supabaseUrl} data-supabase-anon-key={supabaseAnonKey}>
  <main class="container" style="max-width: 600px; margin-top: 5rem;">
    <article>
      <h1 style="text-align: center;">Choose a New Password</h1>
      <form id="update-password-form">
        <label for="password">New Password (min. 6 characters)</label>
        <input type="password" id="password" name="password" placeholder="••••••••" required minlength="6">
        
        <button type="submit" class="primary">Save New Password</button>
      </form>
      <p id="message-area" style="text-align: center;"></p>
    </article>
  </main>

  <script>
    import { createClient } from '@supabase/supabase-js';

    const body = document.querySelector('body');
    const supabaseUrl = body.dataset.supabaseUrl;
    const supabaseAnonKey = body.dataset.supabaseAnonKey;

    if (!supabaseUrl || !supabaseAnonKey) {
      console.error("Supabase credentials not found in the DOM.");
    } else {
      const supabase = createClient(supabaseUrl, supabaseAnonKey);
      const form = document.getElementById('update-password-form');
      const messageArea = document.getElementById('message-area');

      // This script handles the password update when the user lands on this page
      // from the reset link. Supabase automatically handles the session from the URL fragment.
      form.addEventListener('submit', async (event) => {
        event.preventDefault();
        const formData = new FormData(form);
        const password = formData.get('password');

        const { error } = await supabase.auth.updateUser({ password });

        if (error) {
          messageArea.textContent = `Error: ${error.message}`;
          messageArea.style.color = 'var(--pico-color-red-500)';
        } else {
          messageArea.textContent = 'Your password has been updated successfully! You can now log in.';
          messageArea.style.color = 'var(--pico-color-green-500)';
          form.innerHTML = '<a href="/login" role="button">Proceed to Login</a>';
        }
      });

      // Handle the case where the user is redirected here after the password reset email is sent.
      // The access token will be in the URL hash.
      supabase.auth.onAuthStateChange((event, session) => {
        if (event === 'PASSWORD_RECOVERY') {
          // The user is in the password recovery flow.
          // The form is already visible, so no extra action is needed here.
        }
      });
    }
  </script>
</body>
</html>
