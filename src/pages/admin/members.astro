---
import Layout from '../../layouts/Layout.astro';
---

<Layout title="Manage Members">
  <nav>
    <ul>
      <li><strong><a href="/admin">Admin Dashboard</a> / Manage Members</strong></li>
    </ul>
    <ul>
      <li><a href="/schedule">View Schedule</a></li>
      <li><a href="#" id="logout-button">Logout</a></li>
    </ul>
  </nav>

  <h1>Manage Club Members</h1>

  <details>
    <summary role="button">Create New User</summary>
    <article>
      <form id="create-user-form">
        <div class="grid">
          <label for="full_name">Full Name
            <input type="text" id="full_name" name="full_name" required>
          </label>
          <label for="grade">Grade
            <input type="number" id="grade" name="grade" required>
          </label>
        </div>
        <label for="email">School Email</label>
        <input type="email" id="email" name="email" required>
        <button type="submit">Create User & Send Invite</button>
      </form>
    </article>
  </details>

  <div id="members-grid"></div>
</Layout>

<script type="module">
  import { createClient } from '@supabase/supabase-js';
  import { Grid, h } from 'gridjs';

  const body = document.querySelector('body');
  const supabaseUrl = body.dataset.supabaseUrl;
  const supabaseAnonKey = body.dataset.supabaseAnonKey;

  if (!supabaseUrl || !supabaseAnonKey) {
    console.error("Supabase credentials not found in the DOM.");
  } else {
    const supabase = createClient(supabaseUrl, supabaseAnonKey);

    async function checkAdminStatusAndLoadData() {
      const { data: { user } } = await supabase.auth.getUser();
      if (!user) { window.location.href = '/login'; return; }

      const { data: profile, error } = await supabase.from('profiles').select('is_admin').eq('id', user.id).single();
      if (error || !profile || !profile.is_admin) {
        console.error('Admin access denied.');
        window.location.href = '/';
        return;
      }
      
      const grid = new Grid({
        columns: [
          'Full Name', 
          'Grade', 
          'Email', 
          {
            name: 'Status',
            formatter: (cell) => cell ? 'Confirmed' : 'Pending'
          },
          {
            name: 'Admin',
            formatter: (cell, row) => {
              return h('input', {
                type: 'checkbox',
                checked: cell,
                onclick: async () => {
                  const rpcAction = !cell ? 'grant_admin' : 'revoke_admin';
                  await supabase.functions.invoke('manage-user', {
                    method: 'POST',
                    body: { action: rpcAction, userId: row.cells[5].data },
                  });
                }
              });
            }
          },
          {
            name: 'Actions',
            formatter: (cell, row) => {
              return h('div', { className: 'grid' }, [
                h('a', {
                  href: `/admin/members/edit/${row.cells[5].data}`,
                  role: 'button',
                  className: 'contrast',
                }, 'Edit'),
                h('a', {
                  href: '#',
                  role: 'button',
                  className: 'secondary',
                  onclick: async () => {
                    if (confirm('Are you sure you want to delete this user?')) {
                      await supabase.functions.invoke('manage-user', {
                        method: 'POST',
                        body: { action: 'delete_user', userId: row.cells[5].data },
                      });
                      grid.forceRender();
                    }
                  }
                }, 'Delete')
              ]);
            }
          },
          { name: 'id', hidden: true }
        ],
        server: {
          url: `${supabaseUrl}/functions/v1/manage-user`,
          method: 'POST',
          headers: {
            'Authorization': `Bearer ${supabaseAnonKey}`
          },
          body: JSON.stringify({ action: 'list' }),
          then: data => data.users.map(user => [
            user.full_name,
            user.grade,
            user.email,
            user.email_confirmed_at,
            user.is_admin,
            user.id
          ])
        },
        search: true,
        sort: true,
        pagination: true,
      }).render(document.getElementById('members-grid'));
    }

    checkAdminStatusAndLoadData();

    // --- Handle Create User Form ---
    const createUserForm = document.getElementById('create-user-form');
    createUserForm.addEventListener('submit', async (event) => {
      event.preventDefault();
      const formData = new FormData(createUserForm);
      const newUser = {
        email: formData.get('email'),
        full_name: formData.get('full_name'),
        grade: formData.get('grade'),
      };

      const { error } = await supabase.functions.invoke('manage-user', {
        method: 'POST',
        body: { action: 'create_user', user: newUser },
      });

      if (error) {
        alert(`Error creating user: ${error.message}`);
      } else {
        alert('User created successfully! They will receive an invitation email to set their password.');
        createUserForm.reset();
        // Re-render the grid to show the new user
        checkAdminStatusAndLoadData();
      }
    });

    document.getElementById('logout-button').addEventListener('click', async () => {
      await supabase.auth.signOut();
      window.location.href = '/';
    });
  }
</script>