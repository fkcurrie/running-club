---
// src/pages/admin/members/edit/[id].astro
import type { APIRoute } from 'astro';

// This page has two roles:
// 1. GET: Render a form to edit a member's details.
// 2. POST: Handle the form submission to update the member.

// For now, we'll just handle the GET request to display the form.
// The form submission logic will be handled by a client-side script.

const supabaseUrl = import.meta.env.PUBLIC_SUPABASE_URL;
const supabaseAnonKey = import.meta.env.PUBLIC_SUPABASE_ANON_KEY;
---

<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Edit Member | Admin Dashboard</title>
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/@picocss/pico@1/css/pico.min.css">
</head>
<body data-supabase-url={supabaseUrl} data-supabase-anon-key={supabaseAnonKey}>
  <main class="container">
    <nav>
      <ul>
        <li><strong><a href="/admin">Admin</a> / <a href="/admin/members">Members</a> / Edit</strong></li>
      </ul>
      <ul>
        <li><a href="#" id="logout-button">Logout</a></li>
      </ul>
    </nav>

    <h1>Edit Member</h1>

    <article id="edit-form-container">
      <p aria-busy="true">Loading member data...</p>
    </article>
  </main>

  <script>
    import { createClient } from '@supabase/supabase-js';

    const body = document.querySelector('body');
    const supabaseUrl = body.dataset.supabaseUrl;
    const supabaseAnonKey = body.dataset.supabaseAnonKey;

    if (!supabaseUrl || !supabaseAnonKey) {
      console.error("Supabase credentials not found in the DOM.");
    } else {
      const supabase = createClient(supabaseUrl, supabaseAnonKey);
      const formContainer = document.getElementById('edit-form-container');
      const memberId = window.location.pathname.split('/').pop();

      // --- 1. Fetch Member Data and Display Form ---
      async function fetchAndDisplayForm() {
        const { data: member, error } = await supabase
          .from('profiles')
          .select('*')
          .eq('id', memberId)
          .single();

        if (error || !member) {
          console.error("Error fetching member:", error);
          formContainer.innerHTML = '<p>Could not find member.</p>';
          return;
        }

        // Render the form
        formContainer.innerHTML = `
          <form id="edit-form">
            <label for="full_name">Full Name</label>
            <input type="text" id="full_name" name="full_name" value="${member.full_name}" required>
            
            <label for="grade">Grade</label>
            <input type="number" id="grade" name="grade" value="${member.grade}" required>

            <label for="email">Email (read-only)</label>
            <input type="email" id="email" name="email" value="${member.email}" readonly>
            
            <button type="submit">Save Changes</button>
          </form>
        `;

        // Add the submit event listener AFTER the form is in the DOM
        document.getElementById('edit-form').addEventListener('submit', handleUpdate);
      }

      // --- 2. Handle Form Submission ---
      async function handleUpdate(event) {
        event.preventDefault();
        const form = event.currentTarget;
        const formData = new FormData(form);
        
        const updatedData = {
          full_name: formData.get('full_name'),
          grade: formData.get('grade'),
        };

        const { error } = await supabase
          .from('profiles')
          .update(updatedData)
          .eq('id', memberId);

        if (error) {
          alert('Error updating member: ' + error.message);
        } else {
          alert('Member updated successfully!');
          window.location.href = '/admin/members';
        }
      }

      // --- 3. Page Protection and Initial Load ---
      async function checkAdminAndLoad() {
        const { data: { user } } = await supabase.auth.getUser();
        if (!user) {
          window.location.href = '/login';
          return;
        }

        const { data: profile } = await supabase
          .from('profiles')
          .select('is_admin')
          .eq('id', user.id)
          .single();

        if (!profile || !profile.is_admin) {
          window.location.href = '/';
          return;
        }
        
        fetchAndDisplayForm();
      }

      checkAdminAndLoad();

      // --- 4. Handle Logout ---
      document.getElementById('logout-button').addEventListener('click', async () => {
        await supabase.auth.signOut();
        window.location.href = '/';
      });
    }
  </script>
</body>
</html>
