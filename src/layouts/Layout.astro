---
// src/layouts/Layout.astro
import Nav from './Nav.astro';
interface Props {
	title: string;
}

const { title } = Astro.props;
const supabaseUrl = import.meta.env.PUBLIC_SUPABASE_URL;
const supabaseAnonKey = import.meta.env.PUBLIC_SUPABASE_ANON_KEY;
---

<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width" />
  <title>{title} | Running Club</title>
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/@picocss/pico@1/css/pico.min.css" />
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/simple-toasts@1.2.0/dist/style.css">
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/vanilla-calendar-pro@2.9.2/dist/vanilla-calendar.min.css">
  <link href="https://cdn.jsdelivr.net/npm/gridjs/dist/theme/mermaid.min.css" rel="stylesheet" />
</head>
<body data-supabase-url={supabaseUrl} data-supabase-anon-key={supabaseAnonKey}>
  <Nav />
  <main class="container">
    <slot />
  </main>
  <script>
    const themeSwitcher = {
      // Config
      _scheme: "auto",
      menuTarget: "details[role='list']",
      buttonsTarget: "a[data-theme-switcher]",
      buttonAttribute: "data-theme-switcher",
      rootAttribute: "data-theme",
      localStorageKey: "picoPreferedColorScheme",

      // Init
      init() {
        this.scheme = this.schemeFromLocalStorage;
        this.initSwitchers();
      },

      // Get color scheme from local storage
      get schemeFromLocalStorage() {
        if (typeof window.localStorage !== "undefined") {
          if (window.localStorage.getItem(this.localStorageKey) !== null) {
            return window.localStorage.getItem(this.localStorageKey);
          }
        }
        return this._scheme;
      },

      // Prefered color scheme
      get preferedColorScheme() {
        return window.matchMedia("(prefers-color-scheme: dark)").matches ? "dark" : "light";
      },

      // Init switchers
      initSwitchers() {
        const buttons = document.querySelectorAll(this.buttonsTarget);
        buttons.forEach((button) => {
          button.addEventListener(
            "click",
            (event) => {
              event.preventDefault();
              // Set scheme
              this.scheme = button.getAttribute(this.buttonAttribute);
              // Close dropdown
              document.querySelector(this.menuTarget).removeAttribute("open");
            },
            false
          );
        });
      },

      // Set scheme
      set scheme(scheme) {
        if (scheme == "auto") {
          this.preferedColorScheme == "dark" ? (this._scheme = "dark") : (this._scheme = "light");
        } else if (scheme == "dark" || scheme == "light") {
          this._scheme = scheme;
        }
        this.applyScheme();
        this.schemeToLocalStorage();
      },

      // Get scheme
      get scheme() {
        return this._scheme;
      },

      // Apply scheme
      applyScheme() {
        document.querySelector("html").setAttribute(this.rootAttribute, this.scheme);
      },

      // Store scheme to local storage
      schemeToLocalStorage() {
        if (typeof window.localStorage !== "undefined") {
          window.localStorage.setItem(this.localStorageKey, this.scheme);
        }
      },
    };

    // Init
    themeSwitcher.init();
  </script>
  <script type="module">
    import { createClient } from '@supabase/supabase-js';

    const body = document.querySelector('body');
    const supabaseUrl = body.dataset.supabaseUrl;
    const supabaseAnonKey = body.dataset.supabaseAnonKey;

    if (supabaseUrl && supabaseAnonKey) {
      const supabase = createClient(supabaseUrl, supabaseAnonKey);
      
      // Handle Logout
      const logoutButton = document.getElementById('logout-button');
      if (logoutButton) {
        logoutButton.addEventListener('click', async (event) => {
          event.preventDefault();
          await supabase.auth.signOut();
          window.location.href = '/';
        });
      }

      // Check admin status and show/hide admin link
      const adminLink = document.getElementById('admin-link');
      if (adminLink) {
        supabase.auth.getUser().then(({ data: { user } }) => {
          if (user) {
            supabase.from('profiles').select('is_admin').eq('id', user.id).single().then(({ data: profile }) => {
              if (profile && profile.is_admin) {
                adminLink.style.display = 'block';
              }
            });
          }
        });
      }
    }
  </script>
</body>
</html>
